;;; this is a prelude for Alt-Ergo, Dolmen frontend
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2: integer arithmetic
(declare-sort list 1)

;; "Nil"
(declare-fun Nil (par (a)
  () (list a)))

;; "Cons"
(declare-fun Cons (par (a)
  (a
  (list a)) (list a)))

;; "match_list"
(declare-fun match_list (par (a
  a1)
  ((list a)
  a1
  a1) a1))

;; "match_list_Nil"
(assert (par (a a1)
  (forall ((z a1) (z1 a1)) (= (match_list (as Nil (list a)) z z1) z))))

;; "match_list_Cons"
(assert (par (a a1)
  (forall ((z a1) (z1 a1) (u a) (u1 (list a)))
    (= (match_list (Cons u u1) z z1) z1))))

;; "index_list"
(declare-fun index_list (par (a)
  ((list a)) Int))

;; "index_list_Nil"
(assert (par (a) (= (index_list (as Nil (list a))) 0)))

;; "index_list_Cons"
(assert (par (a)
  (forall ((u a) (u1 (list a)))
    (! (= (index_list (Cons u u1)) 1) :pattern ((Cons u u1)) ))))

;; "Cons_proj_1"
(declare-fun Cons_proj_1 (par (a)
  ((list a)) a))

;; "Cons_proj_1'def"
(assert (par (a)
  (forall ((u a) (u1 (list a))) (= (Cons_proj_1 (Cons u u1)) u))))

;; "Cons_proj_2"
(declare-fun Cons_proj_2 (par (a)
  ((list a)) (list a)))

;; "Cons_proj_2'def"
(assert (par (a)
  (forall ((u a) (u1 (list a))) (= (Cons_proj_2 (Cons u u1)) u1))))

;; "list_inversion"
(assert (par (a)
  (forall ((u (list a)))
    (or (= u (as Nil (list a))) (= u (Cons (Cons_proj_1 u) (Cons_proj_2 u)))))))

;; "length"
(declare-fun length (par (a)
  ((list a)) Int))

;; "length'def"
(assert (par (a) (= (length (as Nil (list a))) 0)))

;; "length'def"
(assert (par (a)
  (forall ((x a) (x1 (list a))) (= (length (Cons x x1)) (+ 1 (length x1))))))

;; "Length_nonnegative"
(assert (par (a) (forall ((l (list a))) (<= 0 (length l)))))

;; "Length_nil"
(assert (par (a)
  (forall ((l (list a))) (=> (= (length l) 0) (= l (as Nil (list a)))))))

;; "Length_nil"
(assert (par (a)
  (forall ((l (list a))) (=> (= l (as Nil (list a))) (= (length l) 0)))))

(declare-datatypes ((tuple2 2))
  ((par (a2 a3) ((Tuple2 (Tuple2_proj_1 a2)(Tuple2_proj_2 a3))))))

;; "g"
(declare-fun g () (list (tuple2 Int
  (list Int))))

;; "v1"
(declare-fun v1 () Int)

;; "v2"
(declare-fun v2 () Int)

;; "x"
(declare-fun x () (list (tuple2 Int
  (list Int))))

;; "x"
(declare-fun x1 () Int)

;; "x"
(declare-fun x2 () (list Int))

;; "H"
(assert (= g (Cons (Tuple2 x1 x2) x)))

;; "H"
(assert (not (= x1 v1)))

;; Goal "add_edge'vc"
;; File "/home/eric/Work/onnx/eric.mlw", line 53, characters 10-18
(assert
  (not (and (<= 0 (length g)) (< (length x) (length g)))))

(check-sat)
